#first step is Import libraries
import pandas as pd
import numpy as np
data = pd.read_csv('PreparedData.csv')
#you can change the name of .csv file according your file

#####split train test
from sklearn.model_selection import train_test_split
train_set, test_set = train_test_split(data, test_size=0.2, random_state=42)

#####
x = train_set.drop(["Average yearly road maintenace"],axis=1)
y_label = train_set["Average yearly road maintenace"]

x_test = test_set.drop(["Average yearly road maintenace"],axis=1)
y_test_label = test_set["Average yearly road maintenace"]
#####


import tensorflow as tf
from tensorflow import keras
# from keras import models
# from keras import layers
model = keras.models.Sequential([
        keras.layers.Dense(4,input_shape=(x.shape[1],),kernel_regularizer=keras.regularizers.l2(0.1))
        ,keras.layers.Dense(4,kernel_regularizer=keras.regularizers.l2(0.1))
        ,keras.layers.Dense(1)])


#define call backs
model.compile(loss='mean_squared_error',optimizer='adam')
mycall=keras.callbacks.ModelCheckpoint("data.hdf5",save_best_only=True)
mycall2=keras.callbacks.EarlyStopping(patience=10,restore_best_weights=True)

model.fit(x,y_label,epochs=1000,batch_size = 34,validation_split=.1, callbacks=[mycall,mycall2])



###train error
from sklearn.metrics import mean_squared_error
mse=mean_squared_error(model.predict(x),y_label)
print('train error (rmse) is \n:',mse**.5)


#test error
mse_test=mean_squared_error(model.predict(x_test),y_test_label)
print('test error (rmse) is \n:',mse_test**.5)
